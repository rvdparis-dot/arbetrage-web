{"ast":null,"code":"export class ArbitrageCalculator {\n  static calculate(outcomes, bankroll, kellyFraction = 0.25) {\n    const validOutcomes = outcomes.filter(o => o.decimalOdds !== undefined && o.decimalOdds > 0);\n    if (validOutcomes.length < 2) return null;\n    const totalImpliedProb = validOutcomes.reduce((sum, o) => sum + 1 / (o.decimalOdds || 1), 0);\n    const hasArbitrage = totalImpliedProb < 1;\n    const margin = (1 - totalImpliedProb) * 100;\n    const effectiveBankroll = bankroll * kellyFraction;\n    const totalStake = hasArbitrage ? effectiveBankroll : effectiveBankroll * 0.5;\n    const stakes = {};\n    const returns = {};\n    let guaranteedReturn = Number.POSITIVE_INFINITY;\n    validOutcomes.forEach(o => {\n      const impliedProb = 1 / (o.decimalOdds || 1);\n      stakes[o.id] = totalStake * impliedProb / totalImpliedProb;\n      const winAmount = stakes[o.id] * (o.decimalOdds || 1);\n      const netReturn = winAmount - totalStake;\n      returns[o.id] = netReturn;\n      guaranteedReturn = Math.min(guaranteedReturn, netReturn);\n    });\n    const returnRate = guaranteedReturn / totalStake * 100;\n    return {\n      hasArbitrage,\n      margin,\n      totalStake,\n      guaranteedReturn,\n      returnRate,\n      stakes,\n      returns,\n      kellyFraction\n    };\n  }\n}","map":{"version":3,"names":["ArbitrageCalculator","calculate","outcomes","bankroll","kellyFraction","validOutcomes","filter","o","decimalOdds","undefined","length","totalImpliedProb","reduce","sum","hasArbitrage","margin","effectiveBankroll","totalStake","stakes","returns","guaranteedReturn","Number","POSITIVE_INFINITY","forEach","impliedProb","id","winAmount","netReturn","Math","min","returnRate"],"sources":["/Users/thelaw/arbetrage-web/src/utils/ArbitrageCalculator.ts"],"sourcesContent":["import { BettingOutcome, ArbitrageResult } from \"../models/types\";\n\nexport class ArbitrageCalculator {\n  static calculate(\n    outcomes: BettingOutcome[],\n    bankroll: number,\n    kellyFraction: number = 0.25\n  ): ArbitrageResult | null {\n    const validOutcomes = outcomes.filter(\n      (o) => o.decimalOdds !== undefined && o.decimalOdds > 0\n    );\n    if (validOutcomes.length < 2) return null;\n\n    const totalImpliedProb = validOutcomes.reduce(\n      (sum, o) => sum + 1 / (o.decimalOdds || 1),\n      0\n    );\n    const hasArbitrage = totalImpliedProb < 1;\n    const margin = (1 - totalImpliedProb) * 100;\n\n    const effectiveBankroll = bankroll * kellyFraction;\n    const totalStake = hasArbitrage ? effectiveBankroll : effectiveBankroll * 0.5;\n\n    const stakes: Record<string, number> = {};\n    const returns: Record<string, number> = {};\n    let guaranteedReturn = Number.POSITIVE_INFINITY;\n\n    validOutcomes.forEach((o) => {\n      const impliedProb = 1 / (o.decimalOdds || 1);\n      stakes[o.id] = (totalStake * impliedProb) / totalImpliedProb;\n      const winAmount = stakes[o.id] * (o.decimalOdds || 1);\n      const netReturn = winAmount - totalStake;\n      returns[o.id] = netReturn;\n      guaranteedReturn = Math.min(guaranteedReturn, netReturn);\n    });\n\n    const returnRate = (guaranteedReturn / totalStake) * 100;\n\n    return {\n      hasArbitrage,\n      margin,\n      totalStake,\n      guaranteedReturn,\n      returnRate,\n      stakes,\n      returns,\n      kellyFraction,\n    };\n  }\n}"],"mappings":"AAEA,OAAO,MAAMA,mBAAmB,CAAC;EAC/B,OAAOC,SAASA,CACdC,QAA0B,EAC1BC,QAAgB,EAChBC,aAAqB,GAAG,IAAI,EACJ;IACxB,MAAMC,aAAa,GAAGH,QAAQ,CAACI,MAAM,CAClCC,CAAC,IAAKA,CAAC,CAACC,WAAW,KAAKC,SAAS,IAAIF,CAAC,CAACC,WAAW,GAAG,CACxD,CAAC;IACD,IAAIH,aAAa,CAACK,MAAM,GAAG,CAAC,EAAE,OAAO,IAAI;IAEzC,MAAMC,gBAAgB,GAAGN,aAAa,CAACO,MAAM,CAC3C,CAACC,GAAG,EAAEN,CAAC,KAAKM,GAAG,GAAG,CAAC,IAAIN,CAAC,CAACC,WAAW,IAAI,CAAC,CAAC,EAC1C,CACF,CAAC;IACD,MAAMM,YAAY,GAAGH,gBAAgB,GAAG,CAAC;IACzC,MAAMI,MAAM,GAAG,CAAC,CAAC,GAAGJ,gBAAgB,IAAI,GAAG;IAE3C,MAAMK,iBAAiB,GAAGb,QAAQ,GAAGC,aAAa;IAClD,MAAMa,UAAU,GAAGH,YAAY,GAAGE,iBAAiB,GAAGA,iBAAiB,GAAG,GAAG;IAE7E,MAAME,MAA8B,GAAG,CAAC,CAAC;IACzC,MAAMC,OAA+B,GAAG,CAAC,CAAC;IAC1C,IAAIC,gBAAgB,GAAGC,MAAM,CAACC,iBAAiB;IAE/CjB,aAAa,CAACkB,OAAO,CAAEhB,CAAC,IAAK;MAC3B,MAAMiB,WAAW,GAAG,CAAC,IAAIjB,CAAC,CAACC,WAAW,IAAI,CAAC,CAAC;MAC5CU,MAAM,CAACX,CAAC,CAACkB,EAAE,CAAC,GAAIR,UAAU,GAAGO,WAAW,GAAIb,gBAAgB;MAC5D,MAAMe,SAAS,GAAGR,MAAM,CAACX,CAAC,CAACkB,EAAE,CAAC,IAAIlB,CAAC,CAACC,WAAW,IAAI,CAAC,CAAC;MACrD,MAAMmB,SAAS,GAAGD,SAAS,GAAGT,UAAU;MACxCE,OAAO,CAACZ,CAAC,CAACkB,EAAE,CAAC,GAAGE,SAAS;MACzBP,gBAAgB,GAAGQ,IAAI,CAACC,GAAG,CAACT,gBAAgB,EAAEO,SAAS,CAAC;IAC1D,CAAC,CAAC;IAEF,MAAMG,UAAU,GAAIV,gBAAgB,GAAGH,UAAU,GAAI,GAAG;IAExD,OAAO;MACLH,YAAY;MACZC,MAAM;MACNE,UAAU;MACVG,gBAAgB;MAChBU,UAAU;MACVZ,MAAM;MACNC,OAAO;MACPf;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}