{"ast":null,"code":"export class ArbitrageCalculator{static calculate(outcomes,bankroll){let kellyFraction=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.25;const validOutcomes=outcomes.filter(o=>o.decimalOdds!==undefined&&o.decimalOdds>0);if(validOutcomes.length<2)return null;const totalImpliedProb=validOutcomes.reduce((sum,o)=>sum+1/(o.decimalOdds||1),0);const hasArbitrage=totalImpliedProb<1;const margin=(1-totalImpliedProb)*100;const effectiveBankroll=bankroll*kellyFraction;const totalStake=hasArbitrage?effectiveBankroll:effectiveBankroll*0.5;const stakes={};const returns={};let guaranteedReturn=Number.POSITIVE_INFINITY;validOutcomes.forEach(o=>{const impliedProb=1/(o.decimalOdds||1);stakes[o.id]=totalStake*impliedProb/totalImpliedProb;const winAmount=stakes[o.id]*(o.decimalOdds||1);const netReturn=winAmount-totalStake;returns[o.id]=netReturn;guaranteedReturn=Math.min(guaranteedReturn,netReturn);});const returnRate=guaranteedReturn/totalStake*100;return{hasArbitrage,margin,totalStake,guaranteedReturn,returnRate,stakes,returns,kellyFraction};}}","map":{"version":3,"names":["ArbitrageCalculator","calculate","outcomes","bankroll","kellyFraction","arguments","length","undefined","validOutcomes","filter","o","decimalOdds","totalImpliedProb","reduce","sum","hasArbitrage","margin","effectiveBankroll","totalStake","stakes","returns","guaranteedReturn","Number","POSITIVE_INFINITY","forEach","impliedProb","id","winAmount","netReturn","Math","min","returnRate"],"sources":["/Users/thelaw/Documents/GitHub/arbetrage-web/src/utils/ArbitrageCalculator.ts"],"sourcesContent":["import { BettingOutcome, ArbitrageResult } from \"../models/types\";\n\nexport class ArbitrageCalculator {\n  static calculate(\n    outcomes: BettingOutcome[],\n    bankroll: number,\n    kellyFraction: number = 0.25\n  ): ArbitrageResult | null {\n    const validOutcomes = outcomes.filter(\n      (o) => o.decimalOdds !== undefined && o.decimalOdds > 0\n    );\n    if (validOutcomes.length < 2) return null;\n\n    const totalImpliedProb = validOutcomes.reduce(\n      (sum, o) => sum + 1 / (o.decimalOdds || 1),\n      0\n    );\n    const hasArbitrage = totalImpliedProb < 1;\n    const margin = (1 - totalImpliedProb) * 100;\n\n    const effectiveBankroll = bankroll * kellyFraction;\n    const totalStake = hasArbitrage ? effectiveBankroll : effectiveBankroll * 0.5;\n\n    const stakes: Record<string, number> = {};\n    const returns: Record<string, number> = {};\n    let guaranteedReturn = Number.POSITIVE_INFINITY;\n\n    validOutcomes.forEach((o) => {\n      const impliedProb = 1 / (o.decimalOdds || 1);\n      stakes[o.id] = (totalStake * impliedProb) / totalImpliedProb;\n      const winAmount = stakes[o.id] * (o.decimalOdds || 1);\n      const netReturn = winAmount - totalStake;\n      returns[o.id] = netReturn;\n      guaranteedReturn = Math.min(guaranteedReturn, netReturn);\n    });\n\n    const returnRate = (guaranteedReturn / totalStake) * 100;\n\n    return {\n      hasArbitrage,\n      margin,\n      totalStake,\n      guaranteedReturn,\n      returnRate,\n      stakes,\n      returns,\n      kellyFraction,\n    };\n  }\n}"],"mappings":"AAEA,MAAO,MAAM,CAAAA,mBAAoB,CAC/B,MAAO,CAAAC,SAASA,CACdC,QAA0B,CAC1BC,QAAgB,CAEQ,IADxB,CAAAC,aAAqB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAE5B,KAAM,CAAAG,aAAa,CAAGN,QAAQ,CAACO,MAAM,CAClCC,CAAC,EAAKA,CAAC,CAACC,WAAW,GAAKJ,SAAS,EAAIG,CAAC,CAACC,WAAW,CAAG,CACxD,CAAC,CACD,GAAIH,aAAa,CAACF,MAAM,CAAG,CAAC,CAAE,MAAO,KAAI,CAEzC,KAAM,CAAAM,gBAAgB,CAAGJ,aAAa,CAACK,MAAM,CAC3C,CAACC,GAAG,CAAEJ,CAAC,GAAKI,GAAG,CAAG,CAAC,EAAIJ,CAAC,CAACC,WAAW,EAAI,CAAC,CAAC,CAC1C,CACF,CAAC,CACD,KAAM,CAAAI,YAAY,CAAGH,gBAAgB,CAAG,CAAC,CACzC,KAAM,CAAAI,MAAM,CAAG,CAAC,CAAC,CAAGJ,gBAAgB,EAAI,GAAG,CAE3C,KAAM,CAAAK,iBAAiB,CAAGd,QAAQ,CAAGC,aAAa,CAClD,KAAM,CAAAc,UAAU,CAAGH,YAAY,CAAGE,iBAAiB,CAAGA,iBAAiB,CAAG,GAAG,CAE7E,KAAM,CAAAE,MAA8B,CAAG,CAAC,CAAC,CACzC,KAAM,CAAAC,OAA+B,CAAG,CAAC,CAAC,CAC1C,GAAI,CAAAC,gBAAgB,CAAGC,MAAM,CAACC,iBAAiB,CAE/Cf,aAAa,CAACgB,OAAO,CAAEd,CAAC,EAAK,CAC3B,KAAM,CAAAe,WAAW,CAAG,CAAC,EAAIf,CAAC,CAACC,WAAW,EAAI,CAAC,CAAC,CAC5CQ,MAAM,CAACT,CAAC,CAACgB,EAAE,CAAC,CAAIR,UAAU,CAAGO,WAAW,CAAIb,gBAAgB,CAC5D,KAAM,CAAAe,SAAS,CAAGR,MAAM,CAACT,CAAC,CAACgB,EAAE,CAAC,EAAIhB,CAAC,CAACC,WAAW,EAAI,CAAC,CAAC,CACrD,KAAM,CAAAiB,SAAS,CAAGD,SAAS,CAAGT,UAAU,CACxCE,OAAO,CAACV,CAAC,CAACgB,EAAE,CAAC,CAAGE,SAAS,CACzBP,gBAAgB,CAAGQ,IAAI,CAACC,GAAG,CAACT,gBAAgB,CAAEO,SAAS,CAAC,CAC1D,CAAC,CAAC,CAEF,KAAM,CAAAG,UAAU,CAAIV,gBAAgB,CAAGH,UAAU,CAAI,GAAG,CAExD,MAAO,CACLH,YAAY,CACZC,MAAM,CACNE,UAAU,CACVG,gBAAgB,CAChBU,UAAU,CACVZ,MAAM,CACNC,OAAO,CACPhB,aACF,CAAC,CACH,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}