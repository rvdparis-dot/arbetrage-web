{"ast":null,"code":"export class OddsConverter {\n  static americanToDecimal(americanOdds) {\n    const cleanedOdds = americanOdds.trim().replace(\"+\", \"\");\n    const numOdds = parseInt(cleanedOdds, 10);\n    if (isNaN(numOdds) || numOdds === 0) return undefined;\n    if (numOdds > 0) {\n      return numOdds / 100 + 1;\n    } else {\n      return 100 / Math.abs(numOdds) + 1;\n    }\n  }\n  static decimalToAmerican(decimalOdds) {\n    if (decimalOdds >= 2.0) {\n      const american = (decimalOdds - 1.0) * 100;\n      return `+${Math.round(american)}`;\n    } else {\n      const american = -100 / (decimalOdds - 1.0);\n      return `${Math.round(american)}`;\n    }\n  }\n  static impliedProbability(decimalOdds) {\n    return 1 / decimalOdds;\n  }\n}","map":{"version":3,"names":["OddsConverter","americanToDecimal","americanOdds","cleanedOdds","trim","replace","numOdds","parseInt","isNaN","undefined","Math","abs","decimalToAmerican","decimalOdds","american","round","impliedProbability"],"sources":["/Users/thelaw/arbetrage-web/src/utils/OddsConverter.ts"],"sourcesContent":["export class OddsConverter {\n  static americanToDecimal(americanOdds: string): number | undefined {\n    const cleanedOdds = americanOdds.trim().replace(\"+\", \"\");\n    const numOdds = parseInt(cleanedOdds, 10);\n    if (isNaN(numOdds) || numOdds === 0) return undefined;\n    if (numOdds > 0) {\n      return numOdds / 100 + 1;\n    } else {\n      return 100 / Math.abs(numOdds) + 1;\n    }\n  }\n\n  static decimalToAmerican(decimalOdds: number): string {\n    if (decimalOdds >= 2.0) {\n      const american = (decimalOdds - 1.0) * 100;\n      return `+${Math.round(american)}`;\n    } else {\n      const american = -100 / (decimalOdds - 1.0);\n      return `${Math.round(american)}`;\n    }\n  }\n\n  static impliedProbability(decimalOdds: number): number {\n    return 1 / decimalOdds;\n  }\n}"],"mappings":"AAAA,OAAO,MAAMA,aAAa,CAAC;EACzB,OAAOC,iBAAiBA,CAACC,YAAoB,EAAsB;IACjE,MAAMC,WAAW,GAAGD,YAAY,CAACE,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IACxD,MAAMC,OAAO,GAAGC,QAAQ,CAACJ,WAAW,EAAE,EAAE,CAAC;IACzC,IAAIK,KAAK,CAACF,OAAO,CAAC,IAAIA,OAAO,KAAK,CAAC,EAAE,OAAOG,SAAS;IACrD,IAAIH,OAAO,GAAG,CAAC,EAAE;MACf,OAAOA,OAAO,GAAG,GAAG,GAAG,CAAC;IAC1B,CAAC,MAAM;MACL,OAAO,GAAG,GAAGI,IAAI,CAACC,GAAG,CAACL,OAAO,CAAC,GAAG,CAAC;IACpC;EACF;EAEA,OAAOM,iBAAiBA,CAACC,WAAmB,EAAU;IACpD,IAAIA,WAAW,IAAI,GAAG,EAAE;MACtB,MAAMC,QAAQ,GAAG,CAACD,WAAW,GAAG,GAAG,IAAI,GAAG;MAC1C,OAAO,IAAIH,IAAI,CAACK,KAAK,CAACD,QAAQ,CAAC,EAAE;IACnC,CAAC,MAAM;MACL,MAAMA,QAAQ,GAAG,CAAC,GAAG,IAAID,WAAW,GAAG,GAAG,CAAC;MAC3C,OAAO,GAAGH,IAAI,CAACK,KAAK,CAACD,QAAQ,CAAC,EAAE;IAClC;EACF;EAEA,OAAOE,kBAAkBA,CAACH,WAAmB,EAAU;IACrD,OAAO,CAAC,GAAGA,WAAW;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}